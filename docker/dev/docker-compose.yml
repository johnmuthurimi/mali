version: '3.7'

networks:
    front-tier:
        driver: overlay
    back-tier:
        driver: overlay

services:
    consul-service:
        image: consul
        environment:
            - CONSUL_BOOTSTRAP_EXPECT=1
            - CONSUL_CLIENT_LAN_ADDRESS=192.168.100.29
            - CONSUL_DISABLE_KEYRING_FILE=true
        networks:
            - back-tier
        ports:
            - '8500:8500'
        volumes:
            - './../data/consul-service/:/consul/data'
        deploy:
            # placement constraint - in this case on 'manager' nodes only
            placement:
                constraints: [node.role == manager]
        logging:
            options: {max-size: 10m, max-file: '10'}

    rabbitmq-service:
        image: 'rabbitmq:3.6-management-alpine'
        environment:
            RABBITMQ_DEFAULT_USER: appuser
            RABBITMQ_DEFAULT_PASS: appuser
        networks:
            - back-tier
        ports:
            - '5672:5672'
            - '15672:15672'
        volumes:
            - './../data/rabbitmq-service/:/var/lib/rabbitmq'
        deploy:
            # placement constraint - in this case on 'manager' nodes only
            placement:
                constraints: [node.role == manager]
        logging:
            options: {max-size: 10m, max-file: '10'}

    mysql-service:
        image: 'mysql:5.7'
        environment:
            MYSQL_USER: appuser
            MYSQL_PASSWORD: appuser
            MYSQL_ROOT_PASSWORD: root
        networks:
            - back-tier
        ports:
            - '3308:3306'
        volumes:
            - './../data/mysql-service:/var/lib/mysql'
        deploy:
            # placement constraint - in this case on 'manager' nodes only
            placement:
                constraints: [node.role == manager]
        logging:
            options: {max-size: 10m, max-file: '10'}

    web-service:
        image: 'mucunga90/web-service:1.0.0'
        networks:
            - back-tier
            - front-tier
        ports:
            - '80:80'
        logging:
            options: {max-size: 10m, max-file: '10'}
        depends_on:
            - consul-service
            - mysql-service
            - rabbitmq-service
        deploy:
            replicas: 1
            # service resource management
            resources:
                # Hard limit - Docker does not allow to allocate more
                limits:
                    cpus: '0.25'
                    memory: 512M
                # Soft limit - Docker makes best effort to return to it
                reservations:
                    cpus: '0.25'
                    memory: 256M
                # service restart policy
            restart_policy:
                condition: on-failure
                delay: 10s
                max_attempts: 10
            # placement constraint - in this case on 'worker' nodes only
            placement:
                constraints: [node.role == worker]

    gateway-service:
        image: 'mucunga90/gateway-service:1.0.0'
        networks:
            - back-tier
        ports:
            - '8080:8080'
        logging:
            options: {max-size: 10m, max-file: '10'}
        depends_on:
            - consul-service
            - mysql-service
            - rabbitmq-service
        deploy:
            replicas: 1
            # service resource management
            resources:
                # Hard limit - Docker does not allow to allocate more
                limits:
                    cpus: '0.25'
                    memory: 512M
                # Soft limit - Docker makes best effort to return to it
                reservations:
                    cpus: '0.25'
                    memory: 256M
            # service restart policy
            restart_policy:
                condition: on-failure
                delay: 10s
                max_attempts: 10
            # placement constraint - in this case on 'worker' nodes only
            placement:
                constraints: [node.role == worker]

    user-service:
        image: 'mucunga90/user-service:1.0.0'
        networks:
            - back-tier
        ports:
            - '5001:5001'
        logging:
            options: {max-size: 10m, max-file: '10'}
        depends_on:
            - consul-service
            - mysql-service
            - rabbitmq-service
        deploy:
            replicas: 1
            # service resource management
            resources:
                # Hard limit - Docker does not allow to allocate more
                limits:
                    cpus: '0.25'
                    memory: 512M
                # Soft limit - Docker makes best effort to return to it
                reservations:
                    cpus: '0.25'
                    memory: 256M
            # service restart policy
            restart_policy:
                condition: on-failure
                delay: 10s
                max_attempts: 10
            # placement constraint - in this case on 'worker' nodes only
            placement:
                constraints: [node.role == worker]

    alert-service:
        image: 'mucunga90/alert-service:1.0.0'
        networks:
            - back-tier
        ports:
            - '5002:5002'
        logging:
            options: {max-size: 10m, max-file: '10'}
        depends_on:
            - consul-service
            - mysql-service
            - rabbitmq-service
        deploy:
            replicas: 1
            # service resource management
            resources:
                # Hard limit - Docker does not allow to allocate more
                limits:
                    cpus: '0.25'
                    memory: 512M
                # Soft limit - Docker makes best effort to return to it
                reservations:
                    cpus: '0.25'
                    memory: 256M
            # service restart policy
            restart_policy:
                condition: on-failure
                delay: 10s
                max_attempts: 10
            # placement constraint - in this case on 'worker' nodes only
            placement:
                constraints: [node.role == worker]


