version: '3.7'
services:
    rabbitmq:
        image: 'rabbitmq:3.6-management-alpine'
        environment:
            RABBITMQ_DEFAULT_USER: appuser
            RABBITMQ_DEFAULT_PASS: appuser
        ports:
            - '5672:5672'
            - '15672:15672'
        volumes:
            - 'rabbitmq_data:/var/lib/rabbitmq'
        networks:
            - backend-tier
        deploy:
            replicas: 1
            update_config: {parallelism: 2, delay: 10s}
            restart_policy: {condition: on-failure, delay: 10s, max_attempts: 10}
            placement: {constraints: ['node.role == manager']}
            resources:
                limits:
                    cpus: '0.50'
                    memory: 512M
                reservations:
                    cpus: '0.25'
                    memory: 256M
    mysql:
        image: 'mysql:5.7'
        environment:
            MYSQL_USER: appuser
            MYSQL_PASSWORD: appuser
            MYSQL_ROOT_PASSWORD: root
        ports:
            - '3308:3306'
        volumes:
            - 'mysql_data:/var/lib/mysql'
        networks:
            - backend-tier
        deploy:
            replicas: 1
            update_config: {parallelism: 2, delay: 10s}
            restart_policy: {condition: on-failure, delay: 10s, max_attempts: 10}
            placement: {constraints: ['node.role == manager']}
            resources:
                limits:
                    cpus: '0.50'
                    memory: 1024M
                reservations:
                    cpus: '0.25'
                    memory: 256M
    cadvisor:
        image: 'google/cadvisor:v0.29.0'
        ports:
            - '9101:8080'
        volumes:
            - '/var/run/docker.sock:/var/run/docker.sock,readonly'
            - '/var/run:/var/run:rw'
            - '/:/rootfs:ro'
            - '/sys:/sys:ro'
            - '/var/lib/docker:/var/lib/docker:ro'
            - '/dev/disk/:/dev/disk:ro'
        deploy:
            restart_policy: {condition: on-failure}
            resources:
                limits:
                    cpus: '0.50'
                    memory: 1024M
                reservations:
                    cpus: '0.25'
                    memory: 256M
    node-exporter:
        image: prom/node-exporter
        ports:
            - '9100:9100'
        volumes:
            - '/proc:/host/proc:ro'
            - '/sys:/host/sys:ro'
            - '/:/rootfs:ro'
        command:
            - '--path.procfs=/host/proc'
            - '--path.sysfs=/host/sys'
            - '--collector.filesystem.ignored-mount-points'
            - ^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)
        deploy:
            restart_policy: {condition: on-failure}
            resources:
                limits:
                    cpus: '0.50'
                    memory: 512M
                reservations:
                    cpus: '0.25'
                    memory: 256M
    prometheus:
        image: 'prom/prometheus:v2.17.2'
        ports:
            - '9090:9090'
        volumes:
            - '$MALI/docker/config/prometheus.yml:/etc/prometheus/prometheus.yml'
            - 'prometheus_data:/prometheus'
        deploy:
            placement: {constraints: ['node.role == manager']}
            restart_policy: {condition: on-failure}
            resources:
                limits:
                    cpus: '0.50'
                    memory: 512M
                reservations:
                    cpus: '0.25'
                    memory: 256M
        depends_on:
            - cadvisor
            - node-exporter
    grafana:
        image: 'grafana/grafana:6.2.2'
        ports:
            - '3000:3000'
        volumes:
            - 'grafana_data:/var/lib/grafana'
        environment:
            GF_SECURITY_ADMIN_USER: admin
            GF_SECURITY_ADMIN_PASSWORD: admin1234
        deploy:
            placement: {constraints: ['node.role == manager']}
            restart_policy: {condition: on-failure}
            resources:
                limits:
                    cpus: '0.50'
                    memory: 512M
                reservations:
                    cpus: '0.25'
                    memory: 256M
        depends_on:
            - cadvisor
            - node-exporter
            - prometheus
    elasticsearch:
        image: 'docker.elastic.co/elasticsearch/elasticsearch:7.2.0'
        environment:
            - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
            - "discovery.type=single-node"
        ulimits:
            memlock:
                soft: -1
                hard: -1
        ports:
            - '9200:9200'
        volumes:
            - 'elasticsearch_data:/usr/share/elasticsearch/data'
        networks:
            - backend-tier
        deploy:
            placement: {constraints: ['node.role == manager']}
            restart_policy: {condition: on-failure}
            resources:
                limits:
                    cpus: '0.50'
                    memory: 512M
                reservations:
                    cpus: '0.25'
                    memory: 256M
    kibana:
        image: 'docker.elastic.co/kibana/kibana:7.2.0'
        ports:
            - '5601:5601'
        environment:
            - xpack.security.enabled=false
        networks:
            - backend-tier
        deploy:
            placement: {constraints: ['node.role == manager']}
            restart_policy: {condition: on-failure}
            resources:
                limits:
                    cpus: '0.50'
                    memory: 512M
                reservations:
                    cpus: '0.25'
                    memory: 256M
        depends_on:
            - elasticsearch
    # sudo chown root:root filebeat.yml
    # sudo chmod 700 filebeat.yml
    # https://medium.com/@michael_84781/sending-docker-logs-to-elasticsearch-and-kibana-with-filebeat-a0f87d44bfb4
    filebeat:
        image: 'docker.elastic.co/beats/filebeat:7.2.0'
        user: root
        volumes:
            - '$MALI/docker/config/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro'
            - '/var/lib/docker:/var/lib/docker:ro'
            - '/var/run/docker.sock:/var/run/docker.sock'
        networks:
            - backend-tier
        deploy:
            placement: {constraints: ['node.role == manager']}
            restart_policy: {condition: on-failure}
            resources:
                limits:
                    cpus: '0.50'
                    memory: 1024M
                reservations:
                    cpus: '0.25'
                    memory: 256M
    config-service:
        image: 'mucunga90/config-service:1.0.1'
        ports:
            - '8888:8888'
        networks:
            - backend-tier
        deploy:
            replicas: 1
            update_config: {parallelism: 2, delay: 10s}
            restart_policy: {condition: on-failure, delay: 10s, max_attempts: 10}
            placement: {constraints: ['node.role == manager']}
            resources:
                limits:
                    cpus: '0.50'
                    memory: 512M
                reservations:
                    cpus: '0.25'
                    memory: 256M
    discovery-service:
        image: 'mucunga90/discovery-service:1.0.0'
        ports:
            - '8761:8761'
        networks:
            - backend-tier
        deploy:
            replicas: 1
            update_config: {parallelism: 2, delay: 10s}
            restart_policy: {condition: on-failure, delay: 10s, max_attempts: 10}
            placement: {constraints: ['node.role == manager']}
            resources:
                limits:
                    cpus: '0.50'
                    memory: 512M
                reservations:
                    cpus: '0.25'
                    memory: 256M
        depends_on:
            - rabbitmq
            - mysql
            - config-service
    auth-service:
        image: 'mucunga90/auth-service:1.0.0'
        ports:
            - '5001:5001'
        networks:
            - backend-tier
        deploy:
            replicas: 1
            update_config: {parallelism: 2, delay: 10s}
            restart_policy: {condition: on-failure, delay: 10s, max_attempts: 10}
            placement: {constraints: ['node.role == manager']}
            resources:
                limits:
                    cpus: '0.50'
                    memory: 512M
                reservations:
                    cpus: '0.25'
                    memory: 256M
        depends_on:
            - rabbitmq
            - mysql
            - config-service
            - discovery-service
    gateway-service:
        image: 'mucunga90/gateway-service:1.0.0'
        ports:
            - '8080:8080'
        networks:
            - backend-tier
        deploy:
            replicas: 1
            update_config: {parallelism: 2, delay: 10s}
            restart_policy: {condition: on-failure, delay: 10s, max_attempts: 10}
            placement: {constraints: ['node.role == manager']}
            resources:
                limits:
                    cpus: '0.50'
                    memory: 512M
                reservations:
                    cpus: '0.25'
                    memory: 256M
        depends_on:
            - rabbitmq
            - mysql
            - config-service
            - discovery-service
    alert-service:
        image: 'mucunga90/alert-service:1.0.1'
        ports:
            - '5002:5002'
        networks:
            - backend-tier
        deploy:
            replicas: 1
            update_config: {parallelism: 2, delay: 10s}
            restart_policy: {condition: on-failure, delay: 10s, max_attempts: 10}
            placement: {constraints: ['node.role == manager']}
            resources:
                limits:
                    cpus: '0.50'
                    memory: 512M
                reservations:
                    cpus: '0.25'
                    memory: 256M
        depends_on:
            - rabbitmq
            - mysql
            - config-service
            - discovery-service
            - gateway-service
    user-service:
        image: 'mucunga90/user-service:1.0.1'
        ports:
            - '5003:5003'
        networks:
            - backend-tier
        deploy:
            replicas: 1
            update_config: {parallelism: 2, delay: 10s}
            restart_policy: {condition: on-failure, delay: 10s, max_attempts: 10}
            placement: {constraints: ['node.role == manager']}
            resources:
                limits:
                    cpus: '0.50'
                    memory: 512M
                reservations:
                    cpus: '0.25'
                    memory: 256M
        depends_on:
            - rabbitmq
            - mysql
            - config-service
            - discovery-service
            - gateway-service
    web-service:
        image: 'mucunga90/web-service:1.0.0'
        ports:
            - '80:80'
        networks:
            - frontend-tier
            - backend-tier
        deploy:
            replicas: 1
            update_config: {parallelism: 2, delay: 10s}
            restart_policy: {condition: on-failure, delay: 10s, max_attempts: 10}
            placement: {constraints: ['node.role == manager']}
            resources:
                limits:
                    cpus: '0.50'
                    memory: 512M
                reservations:
                    cpus: '0.25'
                    memory: 256M
        depends_on:
            - rabbitmq
            - mysql
            - config-service
            - discovery-service
            - auth-service
            - gateway-service
            - alert-service
            - user-service
networks:
    frontend-tier:
        driver: overlay
        attachable: true
    backend-tier:
        driver: overlay
        attachable: true
volumes:
    rabbitmq_data:
        driver: local
        driver_opts:
            type: none
            o: bind
            device: $MALI/docker/data/rabbitmq
    mysql_data:
        driver: local
        driver_opts:
            type: none
            o: bind
            device: $MALI/docker/data/mysql
    elasticsearch_data:
        driver: local
        driver_opts:
            type: none
            o: bind
            device: $MALI/docker/data/elasticsearch
    filebeat_data:
        driver: local
        driver_opts:
            type: none
            o: bind
            device: $MALI/docker/data/filebeat
    grafana_data:
        driver: local
        driver_opts:
            type: none
            o: bind
            device: $MALI/docker/data/grafana
    prometheus_data:
        driver: local
        driver_opts:
            type: none
            o: bind
            device: $MALI/docker/data/prometheus
